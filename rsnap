#!/usr/bin/perl
#
# Copyright (C) 2008-2014 Oliver Hitz <oliver@net-track.ch>
#
use POSIX qw(strftime);
use Getopt::Long;
use File::Basename;
use threads;
use threads::shared;
use strict;

my $debug_on;
my $force_on;
my $configfile = "/etc/rsnap.conf";
my @groups;

if (!GetOptions( "debug" => \$debug_on,
		 "force" => \$force_on,
		 "config=s" => \$configfile,
		 "group=s" => \@groups)) {
  print "Usage: $0 [--config=rsnap.conf] [--debug] [--force] [--group=group] [host1 .. hostN]\n";
  exit 1;
}

my $started = time();

# The remaining options are host names. We take note of them using the
# hash rsnap_hosts.
my %rsnap_hosts;

if ($#ARGV >= 0) {
  foreach my $h (@ARGV) {
    $rsnap_hosts{$h} = 1;
  }
} else {
  # All hosts
  $rsnap_hosts{"*"} = 1;
}

# Read the configuration file.
my %config;
my %hosts;

open(FILE, $configfile) || die "Failed to open $configfile\n";
my @lines = <FILE>;
close(FILE);
eval("@lines");
die "Failed to eval() file $configfile:\n$@\n" if ($@);

# Set defaults.
set_default(\%config, "lockfile", "/var/run/rsnap.lock");
set_default(\%config, "rotate", "7");
set_default(\%config, "threads", "4");
set_default(\%config, "host_parallel", "2");
set_default(\%config, "exclude", "--exclude=/proc/ --exclude=/sys/");
set_default(\%config, "snapshot_root", "/data/");
set_default(\%config, "archive_name", "snapshot");
set_default(\%config, "temp_dir", "/tmp/");
set_default(\%config, "rsh_program", "ssh -c arcfour -o StrictHostKeyChecking=no");
set_default(\%config, "rsync_program", "/usr/bin/rsync");
set_default(\%config, "rsync_options", "");
set_default(\%config, "progress_file", "/var/run/rsnap.progress");

# If forcing, don't create a progress file, we don't want to overwrite
# the file of another rsnap process.
if ($force_on) {
  $config{progress_file} = "";
}

# Check if already running.
if (!$force_on) {
  if (-f $config{lockfile}) {
    printf STDERR ("Lock file '%s' exists, is rsnap already running?\n",
		   $config{lockfile});
    exit 1;
  }
  open LOCK, ">".$config{lockfile};
  close LOCK;
}

# Create the backup hosts and jobs structure.
my %scheduled_hosts : shared;
my @scheduled_jobs : shared;
my @finished_jobs : shared;

for my $h (keys %hosts) {
  my $host = $hosts{$h};

  # If the hash rsnap_hosts is not empty and this host is not in the
  # hash, we skip it.
  if (!defined $rsnap_hosts{"*"} && !defined $rsnap_hosts{$h}) {
    next;
  }

  # If we have groups selected, check if this host belongs to the
  # right group.
  if (0 != scalar @groups) {
    my $skip = 1;
    for my $group (@groups) {
      if (defined($host->{"group"}) && ($host->{"group"} eq $group)) {
	$skip = 0;
	last;
      }
    }
    if ($skip) {
      next;
    }
  }

  # Create the host structure.
  $scheduled_hosts{$h} = &share({});
  $scheduled_hosts{$h}{"hostname"} = $h;

  if (defined $host->{"host_parallel"}) {
    $scheduled_hosts{$h}{"host_parallel"} = $host->{"host_parallel"};
  } else {
    $scheduled_hosts{$h}{"host_parallel"} = $config{"host_parallel"};
  }
  if (defined $host->{"rotate"}) {
    $scheduled_hosts{$h}{"rotate"} = $host->{"rotate"};
  } else {
    $scheduled_hosts{$h}{"rotate"} = $config{"rotate"};
  }
  if (defined $host->{"exclude"}) {
    $scheduled_hosts{$h}{"exclude"} = $host->{"exclude"};
  } else {
    $scheduled_hosts{$h}{"exclude"} = $config{"exclude"};
  }
  if (!defined($host->{"snapshot_root"})) {
    $host->{"snapshot_root"} = $config{"snapshot_root"};
  }
  if (defined $host->{"group"}) {
    $scheduled_hosts{$h}{"dir"} = $host->{"snapshot_root"}."/".$host->{"group"}."/".$h;
    $scheduled_hosts{$h}{"group"} = $host->{"group"};
  } else {
    $scheduled_hosts{$h}{"dir"} = $host->{"snapshot_root"}."/".$h;
    $scheduled_hosts{$h}{"group"} = "";
  }
  if (defined $host->{rsync_options}) {
    $scheduled_hosts{$h}{rsync_options} = $host->{rsync_options};
  } else {
    $scheduled_hosts{$h}{rsync_options} = $config{rsync_options};
  }

  $scheduled_hosts{$h}{"initialized"} = undef;

  $scheduled_hosts{$h}{"errors"} = 0;
  $scheduled_hosts{$h}{"error_messages"} = "";

  $scheduled_hosts{$h}{"files_total"} = 0;
  $scheduled_hosts{$h}{"files_sent"} = 0;
  $scheduled_hosts{$h}{"bytes_total"} = 0;
  $scheduled_hosts{$h}{"bytes_sent"} = 0;
  $scheduled_hosts{$h}{"duration"} = 0;

  $scheduled_hosts{$h}{"jobs"} = 0;

  my $snapshot_dir = $scheduled_hosts{$h}{"dir"}."/".$config{"archive_name"}.".latest";

  my @filters;

  # If parallel_path is configured, define filters so that the
  # contents of these path is backed up in parallel.
  if ($host->{parallel_path} ne "") {
    my $parallel_path = $host->{parallel_path};

    # Strip trailing slash.
    $parallel_path =~ s/\/$//;

    my $parallel_dir = $snapshot_dir."/".$parallel_path;

    my @subdirs;

    if (-d $parallel_dir) {
      opendir(DIR, $parallel_dir);
      while (my $entry = readdir(DIR)) {
	if ($entry eq "." || $entry eq "..") {
	  next;
	}
	if (! -d $parallel_dir."/".$entry) {
	  next;
	}

	push @subdirs, $entry;
      }
      closedir DIR;

      # Create the filters.
      foreach my $entry (@subdirs) {
	my $filter = {
	  "part" => "part-$entry",
	  "expr" => ""
	};

	foreach my $dirpart (dirparts($parallel_path)) {
	  $filter->{expr} .= "+ $dirpart/\n";
	}

	$filter->{expr} .= "+ $parallel_path/$entry/\n";

	foreach my $e (@subdirs) {
	  if ($entry ne $e) {
	    $filter->{expr} .= "- $parallel_path/$e/\n";
	  }
	}

	foreach my $dirpart (reverse dirparts($parallel_path)) {
	  $filter->{expr} .= "- $dirpart/*\n";
	}
	$filter->{expr} .= "- /*\n";

	push @filters, $filter;
      }

      # Create filter taking care of the rest.
      my $filter = {
	"part" => "rest",
	"expr" => ""
      };
      foreach my $entry (@subdirs) {
	$filter->{expr} .= "- $parallel_path/$entry/\n";
      }
      push @filters, $filter;
    }
  }

  if (0 == scalar @filters) {
    # Only one job, backup the entire host.
    my $j = $#scheduled_jobs+1;
    $scheduled_jobs[$j] = &share({});
    $scheduled_jobs[$j]{"hostname"} = $h;
    $scheduled_jobs[$j]{"part"} = "full";
    $scheduled_jobs[$j]{"dir"} = $scheduled_hosts{$h}{"dir"};
    $scheduled_jobs[$j]{"last_duration"} = get_last_duration($scheduled_jobs[$j]);
    $scheduled_jobs[$j]{"exclude"} = $scheduled_hosts{$h}{"exclude"};

    $scheduled_hosts{$h}{"jobs"}++;

    debug("Scheduling job for host $h\n");
  } else {
    # Iterate through the filters.
    foreach my $f (@filters) {
      my $j = $#scheduled_jobs+1;
      $scheduled_jobs[$j] = &share({});
      $scheduled_jobs[$j]{"hostname"} = $h;
      $scheduled_jobs[$j]{"part"} = $f->{part};
      $scheduled_jobs[$j]{"dir"} = $scheduled_hosts{$h}{"dir"};
      $scheduled_jobs[$j]{"filter"} = $f->{expr};
      $scheduled_jobs[$j]{"last_duration"} = get_last_duration($scheduled_jobs[$j]);
      $scheduled_jobs[$j]{"exclude"} = $scheduled_hosts{$h}{"exclude"};

      $scheduled_hosts{$h}{"jobs"}++;

      debug("Scheduling job for host $h (".$f->{part}.")\n");
    }
  }
}

# Sort the jobs by duration (longest job first).
@scheduled_jobs = sort { $b->{"last_duration"} <=> $a->{"last_duration"} } @scheduled_jobs;

# Prepare progress structure.
my %progress : shared;

$progress{hosts_total} = scalar values %scheduled_hosts;
$progress{hosts_done} = 0;
$progress{jobs_total} = scalar @scheduled_jobs;
$progress{jobs_done} = 0;

for (my $i = 0; $i < $config{threads}; $i++) {
  $progress{"thr_state_".$i} = "<idle>";
}

my $rsnap_lock : shared;

# Start the progress thread
my $progress_threads = threads->create("progress_thread");

# Start the backup threads
my @threads = ();

for (my $i = 0; $i < $config{"threads"}; $i++) {
  push @threads, threads->create("backup_thread", $i);
}

for my $thread (@threads) {
  $thread->join;
}

# Finalize the backups.
foreach my $host (values %scheduled_hosts) {
  backup_finalize($host);
}

# Create and send report.
my $report = "";

foreach my $h (sort keys %scheduled_hosts) {
  my $host = $scheduled_hosts{$h};

  if ($host->{"errors"} > 0) {
    if ($report eq "") {
      $report .= "rsnap errors:\n\n";
    }
    if ($host->{"jobs"} > 1) {
      $report .= sprintf("%s (%d job out of %d failed):\n",
			 $host->{"hostname"},
			 $host->{"errors"},
			 $host->{"jobs"});
      $report .= $host->{"error_messages"};
    } else {
      $report .= sprintf("%s: %s",
			 $host->{"hostname"},
			 $host->{"error_messages"});
    }
  }
}

if ($report ne "") {
  $report .= "\n\n";
}

my $group = {
  "name" => "",
  "hosts" => 0,
  "files_total" => 0,
  "files_sent" => 0,
  "bytes_total" => 0,
  "bytes_sent" => 0,
  "duration" => 0
};
my $total = {
  "files_total" => 0,
  "files_sent" => 0,
  "bytes_total" => 0,
  "bytes_sent" => 0,
  "duration" => 0
};

$report .= "                                  Files             Size in GB\n";
$report .= "Host                              Total    Sent     Total    Sent     Time\n";
$report .= "--------------------------------- -------- -------- -------- -------- --------\n";

foreach my $h (sort { my $o = $scheduled_hosts{$a}{"group"} cmp $scheduled_hosts{$b}{"group"}; if ($o != 0) { return $o; } else { return $a cmp $b; } } keys %scheduled_hosts) {
  my $host = $scheduled_hosts{$h};
  
  if ($host->{"group"} ne $group->{"name"}) {
    if ($group->{"hosts"} > 0) {
      # Print subtotal.
      $report .= "--------------------------------- -------- -------- -------- -------- --------\n";
      $report .= sprintf("%-33s %8d %8d %8.2f %8.2f %8s\n",
			 "Total ".$group->{"name"},
			 $group->{"files_total"},
			 $group->{"files_sent"},
			 $group->{"bytes_total"} / 1024.0,
			 $group->{"bytes_sent"} / 1024.0,
			 format_duration($group->{duration}));
      $report .= "\n";
    }
    
    $group = {
      "name" => $host->{"group"},
      "hosts" => 0,
      "files_total" => 0,
      "files_sent" => 0,
      "bytes_total" => 0,
      "bytes_sent" => 0,
      "duration" => 0
    };
  }
  
  $group->{"hosts"}++;
  
  if ($host->{"errors"} == 0) {
    $report .= sprintf("%-33s %8d %8d %8.2f %8.2f %8s\n",
		       $host->{"hostname"},
		       $host->{"files_total"},
		       $host->{"files_sent"},
		       $host->{"bytes_total"} / 1024.0,
		       $host->{"bytes_sent"} / 1024.0,
                       format_duration($host->{duration}));
    
    $group->{"files_total"} += $host->{"files_total"};
    $group->{"files_sent"} += $host->{"files_sent"};
    $group->{"bytes_total"} += $host->{"bytes_total"};
    $group->{"bytes_sent"} += $host->{"bytes_sent"};
    $group->{"duration"} += $host->{"duration"};
    
    $total->{"files_total"} += $host->{"files_total"};
    $total->{"files_sent"} += $host->{"files_sent"};
    $total->{"bytes_total"} += $host->{"bytes_total"};
    $total->{"bytes_sent"} += $host->{"bytes_sent"};
    $total->{"duration"} += $host->{"duration"};
  }
}

# Print subtotal if in group.
if ($group->{"name"} ne "") {
  $report .= "--------------------------------- -------- -------- -------- -------- --------\n";
  $report .= sprintf("%-33s %8d %8d %8.2f %8.2f %8s\n",
		     "Total ".$group->{"name"},
		     $group->{"files_total"},
		     $group->{"files_sent"},
		     $group->{"bytes_total"} / 1024.0,
		     $group->{"bytes_sent"} / 1024.0,
                     format_duration($group->{duration}));
}

# Print grand total.
$report .= "--------------------------------- -------- -------- -------- -------- --------\n";
$report .= sprintf("%-33s %8d %8d %8.2f %8.2f %8s\n",
		   "Total",
		   $total->{"files_total"},
		   $total->{"files_sent"},
		   $total->{"bytes_total"} / 1024.0,
		   $total->{"bytes_sent"} / 1024.0,
                   format_duration($total->{duration}));

# Send report by email if configured.
if ($config{email_to} ne "") {
  send_email($config{email_from},
             $config{email_to},
             $config{email_subject},
             $report);
}
  
debug($report);

# Create the "okfile" once the backup is done.
if (-f $config{"okfile"}) {
  unlink $config{"okfile"};
}
open OK, ">".$config{"okfile"};
close OK;

# Clean up
my @cleanup_dirs : shared;

foreach my $h (sort keys %scheduled_hosts) {
  push @cleanup_dirs, $scheduled_hosts{$h}{"dir"};
}

@threads = ();

for (my $i = 0; $i < $config{"threads"}; $i++) {
  push @threads, threads->create("cleanup_thread", $i);
}

# If we were backing up all hosts, and if an after_backup_script is
# defined, run it now while the cleanup threads are running.
if (defined $rsnap_hosts{"*"}) {
  if (defined $config{"after_backup_script"}) {
    $report = "";

    open SCRIPT, $config{"after_backup_script"}." 2>&1 |";
    while (my $line = <SCRIPT>) {
      $report .= $line;
    }
    close SCRIPT;

    # Send report by email if configured.
    if ($config{after_backup_email_to} ne "") {
      send_email($config{after_backup_email_from},
                 $config{after_backup_email_to},
                 $config{after_backup_email_subject},
                 $report);
    }
  }
}

# Now, wait for the cleanup threads to finish.
for my $thread (@threads) {
  $thread->join;
}

# If we were backing up all hosts, and if an after_cleanup_script is
# defined, run it now after the cleanup threads have finished.
if (defined $rsnap_hosts{"*"}) {
  if (defined $config{"after_cleanup_script"}) {
    $report = "";

    open SCRIPT, $config{"after_cleanup_script"}." 2>&1 |";
    while (my $line = <SCRIPT>) {
      $report .= $line;
    }
    close SCRIPT;

    # Send report by email if configured.
    if ($config{after_cleanup_email_to} ne "") {
      send_email($config{after_cleanup_email_from},
                 $config{after_cleanup_email_to},
                 $config{after_cleanup_email_subject},
                 $report);
    }
  }
}

# Wait for the progress_thread to finish.
$progress{quit} = 1;
$progress_threads->join();

if (!$force_on) {
  # Remove lockfile
  unlink $config{"lockfile"};
}

if ($config{progress_file} ne "") {
  unlink($config{progress_file});
}

exit 0;

# ----------------------------------------------------------------------------
# Output a debug message.
#
sub debug
{
  my ($message) = @_;

  if ($debug_on) {
    print $message;
  }
}

# ----------------------------------------------------------------------------
# The progress thread.
#
sub progress_thread
{
  while (!$progress{quit}) {
    sleep(1);

    {
      lock($rsnap_lock);
      update_progress();
    }
  }
}

# ----------------------------------------------------------------------------
# The backup main program.
#
sub backup_thread
{
  my ($thread_number) = @_;
  debug("Backup thread $thread_number: started.\n");

  # Initialize thread environment
  my $tempdir = $config{"temp_dir"}."/rsnap.".$$.".".$thread_number;

  # Ensure the temporary directory doesn't exist
  if (-d $tempdir) {
    return;
  }

  mkdirp($tempdir);

  while (has_backup_jobs()) {
    my ($job) = next_backup_job();
    if ($job) {
      my $start = time();
      debug("Backup thread $thread_number: got job ".$job->{"hostname"}."\n");

      $progress{"thr_state_".$thread_number} =
	  sprintf("%s (%s)",
		  $job->{hostname},
		  $job->{part});
      $progress{"thr_start_".$thread_number} = $start;
      $progress{"thr_last_".$thread_number} = $job->{last_duration};

      my ($status, $files_total, $files_sent, $bytes_total, $bytes_sent) = backup($job, $tempdir);

      my $duration = time() - $start;
      debug("Backup thread $thread_number: finished job in $duration seconds.\n");
      backup_job_done($job, $duration, $status, $files_total, $files_sent, $bytes_total, $bytes_sent);
      $progress{"thr_state_".$thread_number} = "<idle>";
      $progress{"thr_start_".$thread_number} = 0;
    } else {
      debug("Backup thread $thread_number: idle.\n");
      last;
    }
  }

  $progress{"thr_state_".$thread_number} = "<finished>";

  rmdir $tempdir;

  debug("Backup thread $thread_number: ended.\n");
}

# ----------------------------------------------------------------------------
# Cleanup program.
#
sub cleanup_thread
{
  my ($number) = @_;
  debug("Cleanup thread $number: started.\n");

  while (1) {
    my ($dir) = next_cleanup_dir();
    if (!defined $dir) {
      last;
    }

    my $deldir = $dir."/".$config{"archive_name"}.".delete";

    `/bin/rm -rf $deldir`;

    debug("Cleanup thread $number: cleaned up $dir.\n");
  }

  debug("Cleanup thread $number: ended.\n");
}

# ----------------------------------------------------------------------------
# Returns the last duration of the specified backup job.
#
sub get_last_duration
{
  my ($job) = @_;

  my $lddir = $job->{"dir"}."/.rsnap";

  if (! -d $lddir) {
    # The .rsnap directory doesn't exist.
    return 0;
  }

  # Try to open the last_duration file
  open LD, $lddir."/".$job->{"part"} or return 0;
  my $last_duration = int <LD>;
  close LD;

  return $last_duration;
}

# ----------------------------------------------------------------------------
# Store the last duration of the specified backup job.
#
sub store_last_duration
{
  my ($job) = @_;

  my $lddir = $job->{"dir"}."/.rsnap";

  mkdirp($lddir);

  # Create the last_duration file.
  open LD, ">".$lddir."/".$job->{"part"} or return 0;
  print LD $job->{"last_duration"};
  close LD;
}

# ----------------------------------------------------------------------------
# Returns the next cleanup directory.
#
sub next_cleanup_dir
{
  lock($rsnap_lock);

  if ($#cleanup_dirs >= 0) {
    return pop @cleanup_dirs;
  }

  return undef;
}

# ----------------------------------------------------------------------------
# Checks if there are any backup jobs left.
#
sub has_backup_jobs
{
  lock($rsnap_lock);
  return $#scheduled_jobs >= 0;
}

# ----------------------------------------------------------------------------
# Update the progress file.
#
sub update_progress
{
  if ($config{progress_file} ne "") {
    my $now = time();

    open PROGRESS, ">".$config{progress_file} or return;

    printf PROGRESS
	"Started: %s, %s ago.\n\n",
	strftime("%Y%m%d %H:%M:%S", localtime($started)),
	format_duration($now - $started);

    printf PROGRESS
	"Hosts: %d/%d\n",
	$progress{hosts_done},
	$progress{hosts_total};
    printf PROGRESS
	"Jobs: %d/%d\n",
	$progress{jobs_done},
	$progress{jobs_total};

    printf PROGRESS "\nThreads::\n";

    for (my $i = 0; $i < $config{threads}; $i++) {
      my $time = "";
      my $start = $progress{"thr_start_".$i};
      my $last = $progress{"thr_last_".$i};

      if ($start > 0) {
	$time = sprintf(" since %s", format_duration($now - $start));
	if ($last != 0) {
	  $time .= sprintf(" (last: %s)", format_duration($last));
	}
      }

      printf PROGRESS
	  "%d: %s%s\n",
	  $i,
	  $progress{"thr_state_".$i},
	  $time;
    }

    close PROGRESS;
  }
}

# ----------------------------------------------------------------------------
# Returns the next backup job.
#
sub next_backup_job
{
  lock($rsnap_lock);

  for (my $i = 0; $i <= $#scheduled_jobs; $i++) {
    my $job = $scheduled_jobs[$i];
    my $host = $scheduled_hosts{$job->{"hostname"}};

    # Check if the host in question still has capacity for this job.
    if ($host->{"in_progress"} < $host->{"host_parallel"}) {
      # Yes, there is enough capacity

      # Remove the job from the list of jobs.
      for (my $j = $i; $j <= $#scheduled_jobs-1; $j++) {
	$scheduled_jobs[$j] = $scheduled_jobs[$j+1];
      }
      pop @scheduled_jobs;

      # This host has one more job in progress.
      $host->{"in_progress"}++;

      # Initialize backup for this host.
      if (!$host->{"initialized"}) {
	backup_initialize_host($host);
	$host->{"initialized"} = 1;
      }

      return $job;
    }
  }

  return undef;
}

# ----------------------------------------------------------------------------
# Signals that a backup job is done.
#
sub backup_job_done
{
  lock($rsnap_lock);

  my ($job, $duration, $status, $files_total, $files_sent, $bytes_total, $bytes_sent) = @_;

  $job->{"last_duration"} = $duration;

  my $host = $scheduled_hosts{$job->{"hostname"}};
  $host->{"in_progress"}--;
  $host->{"files_total"} += $files_total;
  $host->{"files_sent"} += $files_sent;
  $host->{"bytes_total"} += $bytes_total;
  $host->{"bytes_sent"} += $bytes_sent;
  $host->{"duration"} += $duration;
  $host->{"jobs_done"}++;
  if ($host->{jobs_done} == $host->{jobs}) {
    $progress{hosts_done}++;
  }

  if ($status != 0 && $status != 23 && $status != 24) {
    $host->{"errors"}++;
    if (defined $job->{"filter"}) {
      $host->{"error_messages"} .= " exit status ".$status."\n";
      $host->{"error_messages"} .= " part: ".$job->{"part"}."\n";
    } else {
      $host->{"error_messages"} .= " exit status ".$status."\n";
    }
  }

  printf
      "%s (%s) done: status=%d, duration=%s\n",
      $job->{hostname},
      $job->{part},
      $status,
      format_duration($duration);

  store_last_duration($job);

  # Push the finished job into the "finished_jobs" queue.
  push @finished_jobs, $job;
  $progress{jobs_done}++;
}

# ----------------------------------------------------------------------------
# Initialize a backup directory.
#
sub backup_initialize_host
{
  my ($host) = @_;

  my $root = $host->{"dir"};

  # Create new working directories.
  mkdirp($root."/".$config{"archive_name"});
  mkdirp($root."/".$config{"archive_name"}.".items");
}

# ----------------------------------------------------------------------------
# Finalize a backup.
#
sub backup_finalize
{
  my ($host) = @_;
  my $root = $host->{"dir"};

  if ($host->{"errors"} == 0) {

    # Rename the "working" directory.
    if (-d $root."/".$config{"archive_name"}) {
      my $date_now = strftime "%Y%m%d", localtime;
      my $cnt_found;

      # Find the newest YYYYMMDD.NNN file.
      opendir(DIR, $root);
      while (my $dir = readdir(DIR)) {
	if (-d $root."/".$dir && $dir =~ /^$config{"archive_name"}\.$date_now\.(\d.*)$/) {
	  my $cnt = $1;
	  if (!defined $cnt_found || ($cnt > $cnt_found)) {
	    $cnt_found = $1;
	  }
	}
      }
      closedir DIR;

      my $suffix;

      if (!defined $cnt_found) {
	$suffix = sprintf("%s.%03d", $date_now, 0);
      } else {
	$suffix = sprintf("%s.%03d", $date_now, $cnt_found+1);
      }

      debug("Renaming working directory: ".$root."/".$config{"archive_name"}." -> ".$root."/".$config{"archive_name"}.".".$suffix."\n");
      rename $root."/".$config{"archive_name"}, $root."/".$config{"archive_name"}.".".$suffix;
      rename $root."/".$config{"archive_name"}.".items", $root."/".$config{"archive_name"}.".".$suffix.".items";

      # Remove the "latest" symlink.
      if (-l $root."/".$config{"archive_name"}.".latest") {
	unlink $root."/".$config{"archive_name"}.".latest";
      }
      if (-l $root."/".$config{"archive_name"}.".items.latest") {
	unlink $root."/".$config{"archive_name"}.".items.latest";
      }

      # Create new "latest" symlink.
      `ln -s $config{"archive_name"}.$suffix $root/$config{"archive_name"}.latest`;
      `ln -s $config{"archive_name"}.$suffix.items $root/$config{"archive_name"}.items.latest`;
    }

    # Create the .delete directory
    if (! -d $root."/".$config{"archive_name"}.".delete") {
      mkdirp($root."/".$config{"archive_name"}.".delete");
    }
    
    # Get the list of all snapshot.YYYYMMDD directories.
    my @dirs = ();

    opendir(DIR, $root);
    while (my $dir = readdir(DIR)) {
      if (-d $root."/".$dir && $dir =~ /^$config{"archive_name"}\.(\d*)$/) {
	push @dirs, $dir;
      }
    }
    closedir DIR;

    @dirs = sort @dirs;

    # Pop directories which should be kept from the dirs array.
    for (my $i = 0; $i < $host->{"rotate"}; $i++) {
      pop @dirs;
    }

    # Move all other directories into the .delete subdir.
    foreach my $dir (@dirs) {
      debug("Renaming directory to delete: ".$root."/".$dir." -> ".$root."/".$config{"archive_name"}.".delete/".$dir."\n");
      rename $root."/".$dir, $root."/".$config{"archive_name"}.".delete/".$dir;
      if (-d $root."/".$dir.".items") {
	debug("Renaming .items file to delete: ".$root."/".$dir.".items -> ".$root."/".$config{"archive_name"}.".delete/".$dir.".items\n");
	rename $root."/".$dir.".items", $root."/".$config{"archive_name"}.".delete/".$dir.".items";
      }
    }
  }
}

# ----------------------------------------------------------------------------
# The backup job.
#
sub backup
{
  my ($job, $tempdir) = @_;

  my $root = $job->{"dir"};

  my $host = $scheduled_hosts{$job->{"hostname"}};

  my $rsync_command = $config{"rsync_program"}." ".$host->{rsync_options};

  # General options
  $rsync_command .= " --archive";
  $rsync_command .= " --delete";
  $rsync_command .= " --numeric-ids";
  $rsync_command .= " --stats";
  $rsync_command .= " --itemize-changes";

  # RSH
  $rsync_command .= " --rsh=\"".$config{"rsh_program"}."\"";

  # Append excludes
  $rsync_command .= " ".$job->{"exclude"};

  # Create the filter file if necessary
  if (defined $job->{"filter"}) {
    open FILTER, ">".$tempdir."/filter";
    print FILTER $job->{"filter"};
    print FILTER "\n";
    close FILTER;
    $rsync_command .= " \"--filter=. ".$tempdir."/filter\"";
  }

  # If there is an older snapshot, set the link-dist option
  if (-l $root."/".$config{"archive_name"}.".latest") {
    $rsync_command .= " --link-dest=".$root."/".$config{"archive_name"}.".latest/";
  }

  # Append host and destination directory
  $rsync_command .= " ".$job->{"hostname"}.":/";
  $rsync_command .= " ".$root."/".$config{"archive_name"}."/";

  my $files_total;
  my $files_sent;
  my $bytes_total;
  my $bytes_sent;

  my $info_file = $root."/".$config{"archive_name"}.".items/".$job->{"part"}.".txt";

  # Print filter to .items file.
  open INFO, ">$info_file";
  print INFO "Filter:\n";
  print INFO $job->{filter};
  print INFO "\n";
  close INFO;

  # Execute command
  system($rsync_command." 2>&1 >>$info_file");

  # Status code
  my $status = $? >> 8;

  # Parse the output.
  open ITEMS, $info_file;
  while (my $line = <ITEMS>) {
    # Strip some characters.
    $line =~ s/[,\.]//g;

    if ($line =~ /^Number of files: (\d+)\D/) {
      $files_total = $1;
    } elsif ($line =~ /^Number of files transferred: (\d+)\D/) {
      $files_sent = $1;
    } elsif ($line =~ /^Total file size: (\d+)\D/) {
      $bytes_total = $1 / (1024*1024);
    } elsif ($line =~ /^Total transferred file size: (\d+)\D/) {
      $bytes_sent = $1 / (1024*1024);
    }
  }
  close ITEMS;

  # Cleanup temporary files
  unlink $tempdir."/filter" if -f $tempdir."/filter";

  return ($status, $files_total, $files_sent, $bytes_total, $bytes_sent);
}

# ----------------------------------------------------------------------------
# format_duration
#
sub format_duration() {
  my $duration = shift;
  my $minutes = $duration / 60;
  return sprintf("%d:%02d:%02d", $minutes / 60, $minutes % 60, $duration % 60);
}

# ----------------------------------------------------------------------------
# mkdir -p
#
sub mkdirp($) {
  my $dir = shift;
  return if (-d $dir);
  mkdirp(dirname($dir));
  mkdir $dir;
}

# ----------------------------------------------------------------------------
# dirparts
#
sub dirparts() {
  my $dir = shift;
  if ($dir eq dirname $dir) {
    return ();
  } else {
    my @result = dirparts(dirname $dir);
    push @result, $dir;
    return @result;
  }
}

# ----------------------------------------------------------------------------
# Set configuration defaults.
#
sub set_default()
{
  my $arr = shift;
  my $var = shift;
  my $value = shift;
  if (!defined $arr->{$var}) {
    $arr->{$var} = $value;
  }
}

# ----------------------------------------------------------------------------
# Send email.
#
sub send_email
{
  my ($from, $to, $subject, $message) = @_;

  open MAIL,"|".$config{"sendmail_program"}." ".$to;
  print MAIL "From: ".$from."\n";
  print MAIL "To: ".$to."\n";
  print MAIL "Subject: ".$subject."\n";
  print MAIL "\n";
  print MAIL $message;
  close MAIL;
}
